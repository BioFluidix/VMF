package ${type.readOnlyImplementation.packageName};

// vmf imports
import ${VMF_CORE_API_PKG}.${VMF_VMFUTIL_PKG_EXT}.*;
import ${VCOLL_PKG}.*;
import ${type.packageName}.*;
import java.beans.PropertyChangeListener;

// property types imports
#foreach( $import in $type.implementation.imports )
import $import;
#end

// interface

/**
 * An immutable representation of the model object {@code $type.fullTypeName}.
 */
class $type.readOnlyImplementation.typeName implements $type.readOnlyInterface.typeName {

  private final $type.typeName mutableObject;

  public ${type.readOnlyImplementation.typeName}($type.typeName mutableObject) {
    this.mutableObject = mutableObject;
  }

#foreach( $prop in $type.implementation.properties )

  @Override
#if($prop.propType == "COLLECTION")

#if($prop.genericType)
  // generic type is a model-type
  public List<${prop.genericType.readOnlyInterface.fullTypeName}> get${prop.nameWithUpperCase}() {

    // we return an unmodifiable mapped list that contains read-only versions of the list elements
    // since read-only types and normal types are incompatible by design, we specify the lambda
    // operation that converts an element into a read-only version of that element
    return VMappedList.newUnmodifiableInstance(mutableObject.get${prop.nameWithUpperCase}(), (e)->e.asReadOnly());

#else
  public List<${prop.genericPackageName}.${prop.genericTypeName}> get${prop.nameWithUpperCase}() {
    return java.util.Collections.unmodifiableList(
      this.mutableObject.get${prop.nameWithUpperCase}()
    );
#end ## if generic type

#elseif(${prop.type})
  // property type is a model-type
  public $prop.type.readOnlyInterface.typeName get${prop.nameWithUpperCase}() {
    return this.mutableObject.get${prop.nameWithUpperCase}().asReadOnly();
#else
  public $prop.typeName get${prop.nameWithUpperCase}() {
    return this.mutableObject.get${prop.nameWithUpperCase}();
#end
 }

#end // end for each property

  @Override
  public void addPropertyChangeListener(PropertyChangeListener l) {
    this.mutableObject.addPropertyChangeListener(l);
  }

  @Override
  public void removePropertyChangeListener(PropertyChangeListener l) {
    this.mutableObject.removePropertyChangeListener(l);
  }

  @Override
  public String toString() {
    return this.mutableObject.toString();
  }

  @Override
  public boolean equals(Object o) {
    return this.mutableObject.equals(o);
  }

  @Override
  public int hashCode() {
    return this.mutableObject.hashCode();
  }

}
