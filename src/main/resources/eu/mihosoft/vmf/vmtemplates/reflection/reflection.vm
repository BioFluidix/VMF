  static final String[] _VMF_PROPERTYNAMES = {
#foreach($prop in $type.implementation.properties)    "$prop.name"#if($foreach.hasNext),#end$newline#end
  };

  static final int[] _VMF_PROPERTYTYPES = {
#foreach($prop in $type.implementation.properties)
    $prop.typeId#if($foreach.hasNext),#else #end // type $prop.typeName
#end
  };

  static final int[] _VMF_PROPERTIESWITHMODELTYPESINDICES = {
#foreach($prop in $type.implementation.properties)
#if($prop.type)    $foreach.index#if($foreach.hasNext),#else #end // type $prop.typeName$newline#end
#end
  };

  @Override
  public String[] _vmf_getPropertyNames() {
    return _VMF_PROPERTYNAMES;
  }

  @Override
  public int[] _vmf_getPropertyTypes() {
    return _VMF_PROPERTYTYPES;
  }

  @Override
  public int[] _vmf_getIndicesOfPropertiesWithModelTypes() {
    return _VMF_PROPERTIESWITHMODELTYPESINDICES;
  }

  @Override
  public Object getPropertyValueById(int propertyId) {

    switch(propertyId) {
#foreach($prop in $type.implementation.properties)
      case $foreach.index:
        // TODO check whether we can prevent lazy initialized properties from
        //      being initialized just for iterating the object graph
        return ${prop.getterPrefix}${prop.nameWithUpperCase}();
#end## for-each property
    }

    return null;
  }
