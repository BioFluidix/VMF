#*
 * Copyright 2016-2017 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${type.packageName};

// vmf imports
import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.*;
import ${VCOLL_PKG}.*;

// property types imports
#foreach( $import in $type.imports )
import $import;
#end

// interface

/**
 * A representation of the immutable model object {@code $type.fullTypeName}.
 *
 * <!-- vmf-begin-model-doc -->
 * <!-- vmf-end-model-doc -->
 *
 */
public interface $type.typeName extends VObject$type.immutableImplementsString, Cloneable, Immutable {
#foreach( $prop in ${type.interface.properties} )

#parse("${VMF_TEMPLATE_PATH}interface/getter.vm")

#end ## for each

#parse("${VMF_TEMPLATE_PATH}interface/builder.vm")

  /**
   * Returns a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'. Since this model object is immutable
   this method does not perform any conversion and returns this object in unmodified form.
   * @return a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'
   */
  ${type.typeName} asReadOnly();

  /**
   * Returns a deep clone of this object.
   * @return a deep clone of this object
   */
  @Override
  $type.typeName clone() /*throws CloneNotSupportedException*/;

}
