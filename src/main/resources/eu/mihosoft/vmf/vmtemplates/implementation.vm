package ${type.implementation.packageName};

// vmf imports
import ${VMF_CORE_API_PKG}.${VMF_VMFUTIL_PKG_EXT}.*;
import ${VCOLL_PKG}.*;
import ${type.packageName}.*;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;
import java.util.Objects;
import java.util.Arrays;

// property types imports
#foreach( $import in $type.implementation.imports )
import $import;
#end

// implementation

/**
 * An implementation of the model object {@code $type.fullTypeName}.
 */
class $type.implementation.typeName implements ${type.typeName}, VMFInternalInterface {


// declare member vars
#parse("${VMF_TEMPLATE_PATH}impl/declare-props.vm")
  private PropertyChangeSupport propertyChanges;

  public ${type.implementation.typeName}() {
    // ...
  }

// public getter methods for accessing properties
#parse("${VMF_TEMPLATE_PATH}impl/getter.vm")

// public setter methods for setting properties
#parse("${VMF_TEMPLATE_PATH}impl/setter.vm")

  // --------------------------------------------------------------------
  // --- Object methods (equals(), toString() etc.)
  // --------------------------------------------------------------------

#parse("${VMF_TEMPLATE_PATH}impl/to-string.vm")

#parse("${VMF_TEMPLATE_PATH}impl/equals.vm")

#parse("${VMF_TEMPLATE_PATH}impl/clone.vm")

  // --------------------------------------------------------------------
  // --- Utility methods
  // --------------------------------------------------------------------

  @Override
  public void addPropertyChangeListener(PropertyChangeListener l) {
      _vmf_getPropertyChanges().addPropertyChangeListener(l);
  }
  @Override
  public void removePropertyChangeListener(PropertyChangeListener l) {
      _vmf_getPropertyChanges().removePropertyChangeListener(l);

      if(_vmf_getPropertyChanges().getPropertyChangeListeners().length==0) {
          propertyChanges = null;
      }
  }

  private PropertyChangeSupport _vmf_getPropertyChanges() {

      if(propertyChanges==null) {
          propertyChanges = new PropertyChangeSupport(this);
      }

      return propertyChanges;
  }

  private boolean _vmf_hasListeners() {
      return propertyChanges!=null;
  }

  private void _vmf_firePropertyChangeIfListenersArePresent(
    String propertyName, Object oldValue, Object newValue) {
      if(_vmf_hasListeners()) {
          _vmf_getPropertyChanges().
                  firePropertyChange(propertyName, oldValue, newValue);
      }
  }

}
