package ${type.implementation.packageName};

// vmf imports
import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.*;
import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.internal.*;
import ${VCOLL_PKG}.*;
import ${type.packageName}.*;
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;
import java.util.Objects;
import java.util.Arrays;

// property types imports
#foreach( $import in $type.implementation.imports )
import $import;
#end

// implementation

/**
 * An implementation of the model object {@code $type.fullTypeName}.
 */
@SuppressWarnings("deprecation")
class $type.implementation.typeName implements ${type.typeName}, VObjectInternalModifiable, VCloneableInternal {

  // --------------------------------------------------------------------
  // --- declaration of member variables
  // --------------------------------------------------------------------

#parse("${VMF_TEMPLATE_PATH}impl/declare-props.vm")
  private PropertyChangeSupport propertyChanges;
  // object id
  private long _vmf_id;

  // --------------------------------------------------------------------
  // --- public constructors
  // --------------------------------------------------------------------

  public ${type.implementation.typeName}() {
    this._vmf_id = VObjectInternal.newId();
  }

  // --------------------------------------------------------------------
  // --- public getter methods for accessing properties
  // --------------------------------------------------------------------

#parse("${VMF_TEMPLATE_PATH}impl/getter.vm")

  // --------------------------------------------------------------------
  // --- public setter methods for setting properties
  // --------------------------------------------------------------------

#parse("${VMF_TEMPLATE_PATH}impl/setter.vm")

  // --------------------------------------------------------------------
  // --- Object methods (equals(), toString() etc.)
  // --------------------------------------------------------------------

#parse("${VMF_TEMPLATE_PATH}impl/to-string.vm")

#parse("${VMF_TEMPLATE_PATH}impl/equals.vm")

#parse("${VMF_TEMPLATE_PATH}impl/clone.vm")

  // --------------------------------------------------------------------
  // --- Utility methods
  // --------------------------------------------------------------------

  @Override
  public void addPropertyChangeListener(PropertyChangeListener l) {
      _vmf_getPropertyChanges().addPropertyChangeListener(l);
  }
  @Override
  public void removePropertyChangeListener(PropertyChangeListener l) {
      _vmf_getPropertyChanges().removePropertyChangeListener(l);

      if(_vmf_getPropertyChanges().getPropertyChangeListeners().length==0) {
          propertyChanges = null;
      }
  }

  private PropertyChangeSupport _vmf_getPropertyChanges() {

      if(propertyChanges==null) {
          propertyChanges = new PropertyChangeSupport(this);
      }

      return propertyChanges;
  }

  private boolean _vmf_hasListeners() {
      return propertyChanges!=null;
  }

  private void _vmf_firePropertyChangeIfListenersArePresent(
    String propertyName, Object oldValue, Object newValue) {
      if(_vmf_hasListeners()) {
          _vmf_getPropertyChanges().
                  firePropertyChange(propertyName, oldValue, newValue);
      }
  }

  // --------------------------------------------------------------------
  // --- Public VMF API
  // --------------------------------------------------------------------

 private VMF vmf;

  @Override
  public VMF vmf() {
    if(vmf==null) {
      vmf = new VMF() {
        public Content content() {
          return new Content() {
            public java.util.Iterator<VObject> iterator() {
              return VIterator.of(${type.implementation.typeName}.this);
            }
            public java.util.stream.Stream<VObject> stream() {
              return VIterator.of(${type.implementation.typeName}.this).asStream();
            }

            public java.util.Iterator<VObject> iterator(VIterator.IterationStrategy strategy) {
              return VIterator.of(${type.implementation.typeName}.this, strategy);
            }
            public java.util.stream.Stream<VObject> stream(VIterator.IterationStrategy strategy) {
              return VIterator.of(${type.implementation.typeName}.this, strategy).asStream();
            }

            @Override
            public ${type.typeName} deepCopy() {
              return ${type.implementation.typeName}.this.clone();
            }

            @Override
            public ${type.typeName} shallowCopy() {
              return ${type.implementation.typeName}.
                this._vmf_shallowCopy(new java.util.IdentityHashMap<>());
              }
            };
          }

          private ChangesImpl changes;

          public Changes changes() {
            if (changes==null) {
              changes = new ChangesImpl();
              changes.setModel(${type.implementation.typeName}.this);
            }

            return changes;
          }

          public long id() {
            return ${type.implementation.typeName}.this._vmf_id;
          }
        }; // end vmf
      } // end if null

      return vmf;
  }

  private ${type.readOnlyInterface.typeName} readOnlyInstance;

  @Override
  public ${type.readOnlyInterface.typeName} asReadOnly() {

    if(readOnlyInstance==null) {
      readOnlyInstance = new ${type.readOnlyImplementation.packageName}.${type.readOnlyImplementation.typeName}(this);
    }

    return readOnlyInstance;
  }


  // --------------------------------------------------------------------
  // --- Reflection methods
  // --------------------------------------------------------------------

  // type id for improved reflection performance
  public static final int _VMF_TYPE_ID = $type.typeId;

  @Override
  public int _vmf_getTypeId() {
    return _VMF_TYPE_ID;
  }


#parse("${VMF_TEMPLATE_PATH}reflection/reflection.vm")

  // --------------------------------------------------------------------
  // --- Id related methods
  // --------------------------------------------------------------------
  @Override
  public long _vmf_getId() {
    return this._vmf_id;
  }

  @Override
  public void _vmf_setId(long id) {
    this._vmf_id = id;
  }
}
