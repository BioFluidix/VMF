#*
 * Copyright 2016-2017 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package $model.package;

import org.mism.transverse.Traverse;
import org.mism.transverse.Traverselet;
import java.util.Map;
import java.util.HashMap;

public class ModelVisitor implements Traverse
{

#foreach ($type in $model.types)##
    private static final Traverselet<$type.simpleName> _visitor${type.simpleName} = (in,ctx) -> {
#foreach ($prop in $type.properties)
#if ($prop.modelType)
        ctx.traverse(in.get${prop.name}());
#elseif ($prop.collection)
        for($prop.containedType e : in.get${prop.name}())
        {
           ctx.traverse(e);
        }
#end
#end
    };
#end
    
    private static final Map<Class<?>, Traverselet<?>> traverselets = new HashMap<Class<?>, Traverselet<?>>(); 
    static {
#foreach ($type in $model.types)##
        traverselets.put(${type.simpleName}.class, _visitor${type.simpleName});
#end     
    }
    
    public static <T> Traverselet<T> getTraverselet(Class<T> cls)
    {
        return (Traverselet<T>) traverselets.get(cls);
    }
    
    public void traverse(Object in) {
        if (in==null)
            return;
#foreach ($type in $model.types)
        if (in instanceof ${type.simpleName})
        {
            _visitor${type.simpleName}.traverse(($type.simpleName) in, this);
        }
        else
#end
        {
           return;
        }
    }
}