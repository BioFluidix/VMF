package ${type.packageName};

// vmf imports
import ${VMF_CORE_API_PKG}.${VMF_VMFUTIL_PKG_EXT}.*;
import ${VCOLL_PKG}.*;

// property types imports
#foreach( $import in $type.imports )
import $import;
#end

// interface

/**
 * An immutable representation of the model object {@code $type.fullTypeName}.
 */
public interface $type.readOnlyInterface.typeName extends VObject$type.readOnlyImplementsString {
#foreach( $prop in $type.properties )

#if(${prop.containmentInfo.containmentType}=="CONTAINER")
#set($opposite = ${prop.containmentInfo.opposite})
/**
 * Returns the value of the '<em><b>${prop.name}</b></em>' container reference.
 *
 * It is bidirectional and its opposite is '{@link ${opposite.typeName}#get${opposite.nameWithUpperCase}() <em>${opposite.name}</em>}'.
 *
 * <!-- vmf-begin-model-doc -->
 * <!-- vmf-end-model-doc -->
 *
 * @return the value of the '<em><b>Master</b></em>' container reference.
 * @see WritableNode#setMaster(Node)
 */
#elseif (${prop.containmentInfo.containmentType}=="CONTAINED")
#if(${prop.propType}=="COLLECTION")
#set($opposite = ${prop.containmentInfo.opposite})
  /**
   * Returns the value of the '<em>${prop.name}</em>' containment list.
   *
   * It is bidirectional and its opposite is '{@link ${opposite.typeName}#get${opposite.nameWithUpperCase}() <em>${opposite.name}</em>}'.
   *
   * <!-- vmf-begin-model-doc -->
   * <!-- vmf-end-model-doc -->
   *
   * @return the value of the '<em>${prop.name}</em>' containment list.
   */
#else ## if collection
  /**
   * Returns the value of the '<em><b>${prop.name}</b></em>' containment reference.
   *
   * It is bidirectional and its opposite is '{@link ${opposite.typeName}#get${opposite.nameWithUpperCase}() <em>${opposite.name}</em>}'.
   *
   * <!-- vmf-begin-model-doc -->
   * <!-- vmf-end-model-doc -->
   *
   * @return the value of the '<em><b>${prop.name}</b></em>' containment reference.
   * @see  Writable${type.typeName}#set${prop.nameWithUpperCase}($prop.typeName)
   */
#end ## if collection
#else ## if container / contained
 /**
  * Returns the value of the '<em>${prop.name}</em>' property.
  *
  * <!-- vmf-begin-model-doc -->
  * <!-- vmf-end-model-doc -->
  *
  * @return the value of the '<em>${prop.name}</em>' property.
  * @see Writable${type.typeName}#set${prop.nameWithUpperCase}($prop.typeName)
  */
#end ## if container / contained
#if($prop.propType == "COLLECTION")
#if($prop.genericType)
  // generic model type
  public VList<${prop.genericType.readOnlyInterface.fullTypeName}> get${prop.nameWithUpperCase}();
#else
  public VList<${prop.genericPackageName}.${prop.genericTypeName}> get${prop.nameWithUpperCase}();
#end ## if genericType
#else
  public #if($prop.type)$prop.type.readOnlyInterface.typeName#else$prop.typeName#end get${prop.nameWithUpperCase}();
#end ## if collection

#end ## for each

}
