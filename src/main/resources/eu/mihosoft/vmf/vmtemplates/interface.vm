package ${type.packageName};

// vmf imports
import ${VMF_CORE_API_PKG}.${VMF_VMFUTIL_PKG_EXT}.*;

// property types imports
#foreach( $import in $type.imports )
import $import;
#end

// interface

/**
 * A representation of the model object {@code $type.fullTypeName}.
 */
public interface $type.typeName extends VObject$type.implementsString {
#foreach( $prop in $type.properties )

#parse("${VMF_TEMPLATE_PATH}interface/getter.vm")
#parse("${VMF_TEMPLATE_PATH}interface/setter.vm")

#end ## for each

  /**
   * Creates a new instance of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>'}
   * @return a new instance of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>'}
   */
  static ${type.typeName} newInstance() {
    try {
      Class<?> cls = Class.forName("${type.implementation.packageName}.${type.implementation.typeName}");
      java.lang.reflect.Constructor constructor = cls.getConstructor();
      constructor.setAccessible(true);
      return (${type.typeName}) constructor.newInstance();
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }  catch (NoSuchMethodException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (SecurityException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalArgumentException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (java.lang.reflect.InvocationTargetException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    return null;
  }

  /**
   * Returns a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>'}
   * @return a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>'}
   */
  public default ${type.readOnlyInterface.typeName} asReadOnly() {
    try {
      Class<?> cls = Class.forName("${type.readOnlyImplementation.packageName}.${type.readOnlyImplementation.typeName}");
      java.lang.reflect.Constructor constructor = cls.getConstructor(${type.typeName}.class);
      constructor.setAccessible(true);
      return (${type.readOnlyInterface.packageName}.${type.readOnlyInterface.typeName}) constructor.newInstance(this);
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }  catch (NoSuchMethodException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (SecurityException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalArgumentException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (java.lang.reflect.InvocationTargetException ex) {
      java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }

    return null;
  }


}
