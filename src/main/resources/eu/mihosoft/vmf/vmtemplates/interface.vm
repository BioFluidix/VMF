#*
 * Copyright 2016-2017 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
package ${type.packageName};

// vmf imports
import ${VMF_RUNTIME_API_PKG}.${VMF_CORE_PKG_EXT}.*;
import ${VCOLL_PKG}.*;

// property types imports
#foreach( $import in $type.imports )
import $import;
#end

// interface

/**
 *#if($type.interfaceOnly) An interface-only#else A#end representation of the model object {@code $type.fullTypeName}.
 *
 * <!-- vmf-begin-model-doc -->
 * <!-- vmf-end-model-doc -->
 *
 */
public interface $type.typeName extends VObject$type.implementsString, Cloneable, Mutable {
#foreach( $prop in ${type.interface.properties} )

#parse("${VMF_TEMPLATE_PATH}interface/getter.vm")
#parse("${VMF_TEMPLATE_PATH}interface/setter.vm")

#end## for each

#parse("${VMF_TEMPLATE_PATH}interface/delegation-methods.vm")

#if(!$type.interfaceOnly)

#parse("${VMF_TEMPLATE_PATH}interface/builder.vm")

  /**
   * Creates a new instance of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'
   * @return a new instance of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'
   */
  static ${type.typeName} newInstance() {

    return __VMF__${type.typeName}_Creator.newInstance();


  }
#end##if type interface only

  /**
   * Returns a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'
   * @return a read-only wrapper of '{@link ${type.typeName} <em><b>${type.typeName}</b></em>}'
   */
  ${type.readOnlyInterface.typeName} asReadOnly();

  /**
   * Returns a deep clone of this object.
   * @return a deep clone of this object
   */
  @Override
  $type.typeName clone() /*throws CloneNotSupportedException*/;

}

#if(!$type.interfaceOnly)
class __VMF__${type.typeName}_Creator {

    static Class<?> cls;
    static java.lang.reflect.Constructor constructor;

    static ${type.typeName} newInstance() {
        try {
            if(cls==null) {
                cls = Class.forName("${type.implementation.packageName}.${type.implementation.typeName}");
            }
            if(constructor==null) {
                constructor = cls.getConstructor();
                constructor.setAccessible(true);
            }
            return (${type.typeName}) constructor.newInstance();
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }  catch (NoSuchMethodException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (java.lang.reflect.InvocationTargetException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        return null;
    }

    static Class<?> builderCls;
    static java.lang.reflect.Constructor builderConstructor;

    static ${type.typeName}.Builder newBuilderInstance() {
        try {#set ( $dollar_sign = "$")
            if(builderCls==null) {
                builderCls = Class.forName("${type.implementation.packageName}.${type.implementation.typeName}${dollar_sign}Builder${VMF_IMPL_CLASS_EXT}");
            }
            if(builderConstructor==null) {
                builderConstructor = builderCls.getConstructor();
                builderConstructor.setAccessible(true);
            }
            return (${type.typeName}.Builder) builderConstructor.newInstance();
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }  catch (NoSuchMethodException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (SecurityException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (java.lang.reflect.InvocationTargetException ex) {
            java.util.logging.Logger.getLogger(${type.typeName}.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        return null;
    }
}

#end##if type interface only
