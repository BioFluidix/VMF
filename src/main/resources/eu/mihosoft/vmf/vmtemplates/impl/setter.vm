#foreach( $prop in ${type.implementation.propertiesWithoutCollectionsBasedContainment} )


## we don't support public setters for containment opposits with collection type
## therefore we don't use override in this case, since the interface does not
## declare such a method
#set($overridePropertySetter = true)
#if(${prop.containmentProperty})
#if(${prop.containmentInfo.opposite.propType}=="COLLECTION")
#set($overridePropertySetter = false)
#end ## end if collectionType
#end ## end if containmentProperty



## we don't support setters for collection types and properties with collection opposites
#if(${prop.propType}!="COLLECTION" && ${prop.containmentInfo.opposite.propType}!="COLLECTION")

#if($overridePropertySetter)
  @Override
#end
  public $prop.setterDeclaration {

    // return early if identical value has been set
    if (this.$prop.name == $prop.name) {
      return;
    }

    // set the new value
    $prop.typeName oldValue = this.$prop.name;
    this.$prop.name = $prop.name;

    // fire property change event
    _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.$prop.name);
#if($prop.containmentProperty)
#if(${prop.containmentInfo.containmentType}=="CONTAINER")
#if(${prop.propType}=="COLLECTION")
    // no collection based containment code necessary
    // FIXME this comment should not be visible in the generated code
#else
    // if previous container is present then release containment relation
    if(oldValue!=null) {
      // (($prop.typeName$VMF_IMPL_CLASS_EXT)oldValue)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(null);

#set($propertyToModifyValue = "oldValue")
#set($oppositeValue = "null")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }

    // if new container is present then update containment relation
    if($prop.name!=null) {
      // (($prop.typeName$VMF_IMPL_CLASS_EXT)$prop.name)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(this);

#set($propertyToModifyValue = "this."+${prop.name})
#set($oppositeValue = "this")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }
#end
#else
#if(${prop.propType}=="COLLECTION")
    // no collection based containment code necessary
    // FIXME this comment should not be visible in the generated code
#else
    // if previous container is present then release containment relation
    if(oldValue!=null) {
      //(($prop.typeName$VMF_IMPL_CLASS_EXT)oldValue)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(null);

#set($propertyToModifyValue = "oldValue")
#set($oppositeValue = "null")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }

    // if new container is present then update containment relation
    if($prop.name!=null) {
      //(($prop.typeName$VMF_IMPL_CLASS_EXT)$prop.name)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(this);

#set($propertyToModifyValue = "this."+${prop.name})
#set($oppositeValue = "this")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }
#end
#end
#end
  }

#if($prop.containmentProperty && ${prop.propType}!="COLLECTION")
  // internal API
  void _vmf_set${prop.nameWithUpperCase}NoContainment($prop.typeName $prop.name) {
    // set the new value
    $prop.typeName oldValue = this.$prop.name;
    this.$prop.name = $prop.name;

    // fire property change event
    _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.$prop.name);
  }
#end

#end ## end if collection

#end ## end for-each
