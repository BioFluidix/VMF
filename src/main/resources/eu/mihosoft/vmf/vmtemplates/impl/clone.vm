  /**Package private copy constructor.
   * It creates a deep or shallow copy of the specified other object.
   * @param other other object
   * @param deepCopy defines whether to perform a deep copy
   */
  ${type.implementation.typeName} (
    ${type.implementation.typeName} other,
    boolean deepCopy
## #foreach ($prop in $type.implementation.properties)
## #if(!$prop.container)
## $prop.typeName $prop.name#if($foreach.hasNext), #end
## #end ## if containment typs
## #end ## for-each property
  ) {
#foreach ($prop in $type.implementation.properties)
#if(!$prop.container)
#if($prop.propType=="COLLECTION")
    if(deepCopy) {
      if(other.${prop.name}!=null) {
        this.get${prop.nameWithUpperCase}().addAll(other.${prop.name});
      } else {
        // nothing to copy
      }
    } else {
      this.$prop.name = other.$prop.name;
    }
#if($prop.contained)
    this.${prop.name}.forEach((e) -> {
        #set($propertyToModifyValue = "e")
        #set($oppositeValue = "this")
        #set($codeIndentValue = "        ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    });
#end ## if contained
#else
//    if(deepCopy) {
//      if(other.${prop.name}!=null) {
//        this.set${prop.nameWithUpperCase}((${prop.typeName})other.${prop.name});
//      }
//    } else {
//      this.set${prop.nameWithUpperCase}(other.${prop.name});
//    }
      this.set${prop.nameWithUpperCase}(other.${prop.name});
#end ## if collection
#end ## if containment typs
#end ## for-each property
  }

  @Override
  public Object clone() /*throws CloneNotSupportedException*/ {
    // http://stackoverflow.com/questions/12886036/deep-copying-a-graph-structure
    http://softwareengineering.stackexchange.com/questions/228848/how-does-java-handle-cyclic-data-references-when-serializing-an-object
    https://gist.github.com/kanrourou/47223bdaf481505d4c7e
    http://www.programcreek.com/2012/12/leetcode-clone-graph-java/
    return new ${type.implementation.typeName}(this, true);
  }
