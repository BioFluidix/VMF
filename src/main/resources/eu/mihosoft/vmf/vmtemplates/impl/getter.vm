#foreach( $prop in ${type.implementation.properties} )
  @Override
  public $prop.getterDeclaration {
#if($prop.containmentProperty && $prop.propType == "COLLECTION")

    if(this.$prop.name==null) {
      this.$prop.name = VList.newInstance(new java.util.ArrayList<>());

      this.${prop.name}.addChangeListener((evt)-> {
            evt.added().elements().forEach((e)->{

                if(e==null) return;

                // remove element from previous collection
                // TODO use bulk operations if possible
                if(e.get${prop.containmentInfo.opposite.nameWithUpperCase}()!=null) {
                  e.get${prop.containmentInfo.opposite.nameWithUpperCase}().get${prop.nameWithUpperCase}().remove(e);
                }

                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "this")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=true)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            });

            evt.removed().elements().forEach((e)->{
              if(e==null) return;
                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "null")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=true)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            });
        });

    }

    return this.$prop.name;

    // return VContainmentUtil.asContainmentList(this.$prop.name, "${prop.containmentInfo.opposite.name}");
#else
#if($prop.propType == "COLLECTION")
    if(this.$prop.name==null) {
      this.$prop.name = VList.newInstance(new java.util.ArrayList<>());
#if($prop.type||$prop.genericType)
      this.${prop.name}.addChangeListener((evt)-> {
            evt.added().elements().forEach((e)->{
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
                #set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach((e)->{
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
        }); // end of change listener
#end## if is model type
    } // end of "lazy init" if(this.$prop.name==null)
#end
    return this.$prop.name;

#end
  } // end of $prop.getterDeclaration
#end
