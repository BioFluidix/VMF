## sets opposite field via reflection
${codeIndentValue}try {
${codeIndentValue}  java.lang.reflect.Field field =
${codeIndentValue}    ${propertyToModifyValue}.getClass().getDeclaredField("${prop.containmentInfo.opposite.name}");
${codeIndentValue}  field.setAccessible(true);
${codeIndentValue}  field.set(${propertyToModifyValue}, $oppositeValue);
${codeIndentValue}} catch (NoSuchFieldException ex) {
${codeIndentValue}  java.util.logging.Logger.getLogger(
${codeIndentValue}     ContainerNodeImpl.class.getName()).
${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
${codeIndentValue}} catch (SecurityException ex) {
${codeIndentValue}  java.util.logging.Logger.getLogger(
${codeIndentValue}     ContainerNodeImpl.class.getName()).
${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
${codeIndentValue}} catch (IllegalArgumentException ex) {
${codeIndentValue}  java.util.logging.Logger.getLogger(
${codeIndentValue}     ContainerNodeImpl.class.getName()).
${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
${codeIndentValue}} catch (IllegalAccessException ex) {
${codeIndentValue}   java.util.logging.Logger.getLogger(
${codeIndentValue}     ContainerNodeImpl.class.getName()).
${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
${codeIndentValue}}
