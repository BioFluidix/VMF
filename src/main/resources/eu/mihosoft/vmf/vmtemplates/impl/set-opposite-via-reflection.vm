## sets opposite field via reflection
${codeIndentValue}try {
${codeIndentValue}  java.lang.reflect.Field field =
${codeIndentValue}    ${propertyToModifyValue}.getClass().getDeclaredField("${prop.containmentInfo.opposite.name}");
${codeIndentValue}  field.setAccessible(true);
${codeIndentValue}  Object oldOpposite = field.get(${propertyToModifyValue});
${codeIndentValue}  field.set(${propertyToModifyValue}, $oppositeValue);
#if(!$disableFireEventValue)
${codeIndentValue}  // generate change event (disableFireEventValue=$disableFireEventValue)
${codeIndentValue}  java.lang.reflect.Method m = ${propertyToModifyValue}.getClass().getDeclaredMethod(
${codeIndentValue}    "_vmf_firePropertyChangeIfListenersArePresent",
${codeIndentValue}    String.class, Object.class, Object.class);
${codeIndentValue}  m.setAccessible(true);
${codeIndentValue}  m.invoke(${propertyToModifyValue},
${codeIndentValue}    "${prop.containmentInfo.opposite.name}", oldOpposite, $oppositeValue);
#else## if disableFireEventValue
${codeIndentValue}  // not generating change event (disableFireEventValue=$disableFireEventValue)
#end## if disableFireEventValue
${codeIndentValue}} catch (Exception ex) {
${codeIndentValue}  java.util.logging.Logger.getLogger(
${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
${codeIndentValue}}

## ${codeIndentValue}} catch (NoSuchFieldException ex) {
## ${codeIndentValue}  java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}} catch (SecurityException ex) {
## ${codeIndentValue}  java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}} catch (IllegalArgumentException ex) {
## ${codeIndentValue}  java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}} catch (IllegalAccessException ex) {
## ${codeIndentValue}   java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}} catch (NoSuchMethodException ex) {
## ${codeIndentValue}   java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}} catch (java.lang.reflect.InvocationTargetException ex) {
## ${codeIndentValue}   java.util.logging.Logger.getLogger(
## ${codeIndentValue}     ${type.implementation.typeName}.class.getName()).
## ${codeIndentValue}     log(java.util.logging.Level.SEVERE, null, ex);
## ${codeIndentValue}}
