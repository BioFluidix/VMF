#if($prop.propType != "COLLECTION" && !$prop.container && $prop.contained && !$prop.crossRefProperty)
  // ----------------------------------------
  // return early if identical value has been set
  // ----------------------------------------
  if (this.__vmf_prop_$prop.name == $prop.name) {
    return;
  }
  // ----------------------------------------

  // ----------------------------------------
  // unregister from previous containers
  // ----------------------------------------
  if(this.__vmf_prop_${prop.name} != null) {
    ${VMFPKG_INT}.VObjectInternalModifiable value_internal = (${VMFPKG_INT}.VObjectInternalModifiable)this.__vmf_prop_$prop.name;
    //value_internal._vmf_unregisterFromContainers(); TODO ADD this to unregister method

    if(value_internal._vmf_getContainer()!=null) {

     ${VMFPKG_INT}.VObjectInternalModifiable container = (${VMFPKG_INT}.VObjectInternalModifiable)value_internal._vmf_getContainer();

      boolean found = false;
#foreach( $container in ${prop.type.findAllTypesThatContainTypeWithOpposite()} )
      // containing type: $container.typeName
#foreach( $contained in ${container.implementation.properties} )
#if(${contained.containmentInfo.containmentType}=="CONTAINED" && ${contained.typeName} == ${prop.typeName})
      // -- > prop: ${contained.name}
      if(!found && container instanceof __VMF_TYPE_${container.typeName}Impl) {
      __VMF_TYPE_${container.typeName}Impl container_internal = (__VMF_TYPE_${container.typeName}Impl)container;
        ${prop.typeName} oldValue = container_internal.__vmf_get_prop_${contained.name}();
        if(oldValue == this.__vmf_prop_${prop.name}) {
          if(oldValue!=null) {
            container_internal.__vmf_set_prop_${contained.name}(null);
            container_internal._vmf_firePropertyChangeIfListenersArePresent("${contained.name}", oldValue, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
          }
          found = true;
        }
      }
#end## contained and types match
#end## for each contained
#end## for each container


    } // end if getContainer!=null  
  } // end if ${prop.name} != null      
  // ----------------------------------------

  // ----------------------------------------
  // set the new value
  // ----------------------------------------
  $prop.typeName oldValue = this.__vmf_prop_$prop.name;
  this.__vmf_prop_$prop.name = $prop.name;
  // ----------------------------------------

  // ----------------------------------------
  // fire property changed event
  // ----------------------------------------
  this._vmf_firePropertyChangeIfListenersArePresent("${prop.name}", oldValue, this.__vmf_prop_$prop.name);
  //this._vmf_firePropertyChangeIfListenersArePresent("${oppositeRefProp.name}", refOldVal, null, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
  // ----------------------------------------
       
  // ----------------------------------------
  // register with new container (container name: ${container.name})
  // ----------------------------------------
  if(this.__vmf_prop_${prop.name} != null) {
    ${VMFPKG_INT}.VObjectInternalModifiable value_internal = (${VMFPKG_INT}.VObjectInternalModifiable)this.__vmf_prop_$prop.name;
    ${VMFPKG}.VObject oldContainer = value_internal._vmf_getContainer(); 
    value_internal._vmf_setContainer(this);
#if(${prop.containmentInfo.opposite})## opposite
    value_internal._vmf_setContainerPropertyId(${prop.containmentInfo.opposite.propId});
    this._vmf_firePropertyChangeIfListenersArePresent("${prop.containmentInfo.opposite.name}", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#else##                                      ## opposite
    this._vmf_firePropertyChangeIfListenersArePresent("__vmf_prop_unnamed_container", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#end##                                       ## opposite
  }  
  // ----------------------------------------  
#end