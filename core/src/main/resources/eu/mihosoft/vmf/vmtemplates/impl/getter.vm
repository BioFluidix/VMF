#*
 * Copyright 2017-2018 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2018 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#foreach( $prop in ${type.implementation.properties} )
  @Override
  public $prop.getterDeclaration {
#if($prop.containmentProperty && $prop.propType == "COLLECTION")

    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(new java.util.ArrayList<>());

      this.__vmf_prop_${prop.name}.addChangeListener((evt)-> {
            evt.added().elements().forEach((e)->{

                if(e==null) return;

                // remove element from previous collection
                // TODO use bulk operations if possible
                if(e.get${prop.containmentInfo.opposite.nameWithUpperCase}()!=null) {
                  e.get${prop.containmentInfo.opposite.nameWithUpperCase}().get${prop.nameWithUpperCase}().remove(e);
                }

                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "this")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=true)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach((e)->{
              if(e==null) return;
                #set($propertyToModifyValue = "e")
                #set($oppositeValue = "null")
                #set($codeIndentValue = "                ")
                #set($disableFireEventValue=true)
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()
            
        }); // end of change listener

    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)

    return this.__vmf_prop_$prop.name;

    // return VContainmentUtil.asContainmentList(this.__vmf_prop_$prop.name, "__vmf_prop_${prop.containmentInfo.opposite.name}");
#else
#if($prop.propType == "COLLECTION")
    if(this.__vmf_prop_$prop.name==null) {
      this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(new java.util.ArrayList<>());
#if($prop.type||$prop.genericType)
      this.__vmf_prop_${prop.name}.addChangeListener((evt)-> {
            evt.added().elements().forEach((e)->{
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "e")
#set($objectToRemoveReferenceOnValue = false)
#set($referenceToRemoveValue = false)
                #set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.added()

            evt.removed().elements().forEach((e)->{
              // nothing to do if e == null
              if(e==null) return;
#set($objectToAddReferenceOnValue=false)
#set($referenceToAddValue = false)
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "e")
#set($codeIndentValue = "                ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
            }); // end of evt.removed()

        }); // end of change listener
#end## if is model type
    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)
#end
    return this.__vmf_prop_$prop.name;

#end
  } // end of $prop.getterDeclaration
#end
