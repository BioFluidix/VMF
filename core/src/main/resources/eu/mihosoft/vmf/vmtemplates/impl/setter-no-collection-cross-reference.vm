#if(${prop.propType} != "COLLECTION" && !${prop.container} && !${prop.contained} && ${prop.crossRefProperty})
  // this property holds a (cross-)reference which is indicated by the @Refers annotation (see model type ${type.typeName})
  // ----------------------------------------
  // - cross-ref: 
  //   -> prop:
  //      -> name:       ${prop.name}  
  //      -> propType:   ${prop.typeName}      
  //   -> opposite:      true, ${prop.referenceInfo.opposite.typeName}.${prop.referenceInfo.opposite.name}
  //      -> propType:   ${prop.referenceInfo.opposite.typeName}
  //      -> collection: false
  // ----------------------------------------

  // ----------------------------------------
  // return early if identical value has been set
  // ----------------------------------------
  if (this.__vmf_prop_${prop.name} == ${prop.name}) {
    return;
  }
  // ----------------------------------------


#if(${prop.referenceInfo.opposite.propType} == "COLLECTION")## collection opposite 

  // ----------------------------------------
  // store the old value ...
  // ----------------------------------------
  $prop.typeName oldValue = this.__vmf_prop_$prop.name;

  // ----------------------------------------
  // remove this object as reference from old value 
  // ----------------------------------------
  if(oldValue!=null) {
    String eventInfo = oldValue.get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
    oldValue.get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
    oldValue.get${prop.referenceInfo.opposite.nameWithUpperCase}().remove(this);
    oldValue.get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo);
  }

  // ----------------------------------------
  // ... and set the new value
  // ----------------------------------------
  this.__vmf_prop_$prop.name = $prop.name;
    _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.__vmf_prop_$prop.name);
  if(this.__vmf_prop_${prop.name}!=null) {
    String eventInfo = this.__vmf_prop_${prop.name}.get${prop.referenceInfo.opposite.nameWithUpperCase}().getEventInfo();
    this.__vmf_prop_${prop.name}.get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
    this.__vmf_prop_${prop.name}.get${prop.referenceInfo.opposite.nameWithUpperCase}().add(this);
    this.__vmf_prop_${prop.name}.get${prop.referenceInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo);
  }    
#else##                                                        collection opposite
  // ----------------------------------------
  // set the new value
  // ----------------------------------------
  $prop.typeName oldValue = this.__vmf_prop_$prop.name;
  this.__vmf_prop_$prop.name = $prop.name;
  // ----------------------------------------

  // ----------------------------------------
  // remove this object as reference from old value 
  // ----------------------------------------
  if(oldValue!=null) {
    oldValue.set${prop.referenceInfo.opposite.nameWithUpperCase}(null);
  }
  // ----------------------------------------

  // ----------------------------------------
  // fire event
  // ----------------------------------------
  _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.__vmf_prop_$prop.name);

  // ----------------------------------------
  // register this with opposite if new value is not null
  // ----------------------------------------
  if(this.__vmf_prop_${prop.name}!=null) {
    Object refOldVal = ((__VMF_TYPE_${prop.type.implementation.typeName})this.__vmf_prop_${prop.name}).__vmf_get_prop_${prop.referenceInfo.opposite.name}();
    ((__VMF_TYPE_${prop.type.implementation.typeName})this.__vmf_prop_${prop.name}).__vmf_set_prop_${prop.referenceInfo.opposite.name}(this);
    // fire property change event
    if(refOldVal != this) {
      ((__VMF_TYPE_${prop.type.implementation.typeName})this.__vmf_prop_${prop.name})._vmf_firePropertyChangeIfListenersArePresent("${prop.referenceInfo.opposite.name}", refOldVal, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CROSS_REF);
    }
  }
  // ----------------------------------------
#end##                                                         collection opposite 

#end