#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#foreach( $prop in ${type.implementation.propertiesWithoutCollectionsBasedContainment} )
#if(${prop.propType}=="COLLECTION")##  if   (prop is collection type)
#elseif(${prop.readOnly} == true)  ##  elif (prop is read-only)
public $prop.setterDeclaration { throw new RuntimeException("Cannot set read-only property'${prop.name}'."); }
#else                              ##  else (prop is writable property)

@Override
public $prop.setterDeclaration {

#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-simple.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-container.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-contained.vm")
#parse("${VMF_TEMPLATE_PATH}impl/setter-no-collection-cross-reference.vm")

} // end setterDeclaration (setter method) : $prop.setterDeclaration     
#end##                                  end  (prop is writable property)
#end## end for-each property


@Override 
public void _vmf_unregisterFromContainers() {

// --------------------------------------------------------------------------------------------------------------------
// UNREGISTERING from containers with opposite on both ends
// --------------------------------------------------------------------------------------------------------------------
#foreach( $container in ${type.implementation.properties} ) 
#if(${container.containmentInfo.containmentType}=="CONTAINER" && !${container.containmentInfo.withoutOpposite})
    // ----------------------------------------------------------------------------------------------------------------
    // -> unregistering from container: ${container.parent.typeName}.${container.name} : type: ${container.typeName}
    // ----------------------------------------------------------------------------------------------------------------
    if(this.__vmf_prop_${container.name} != null) {
      __VMF_TYPE_${container.type.typeName}Impl container_internal = (__VMF_TYPE_${container.type.typeName}Impl)this.__vmf_prop_${container.name};
      
      // --------------------------------------------------------------------------------
      // release container property '${container.name}' from this
      // --------------------------------------------------------------------------------
      this.__vmf_prop_${container.name} = null;
      this._vmf_firePropertyChangeIfListenersArePresent("${container.name}", container_internal, null);
      // --------------------------------------------------------------------------------

#if(${container.containmentInfo.opposite.propType}!="COLLECTION")##  if   (prop is no collection type) 

      // --------------------------------------------------------------------------------
      // release 'this' from container property '${container.typeName}.${container.containmentInfo.opposite.name}'
      // --------------------------------------------------------------------------------
      Object oldValue = container_internal.__vmf_get_prop_${container.containmentInfo.opposite.name}();
      if(oldValue != null) {
        container_internal.__vmf_set_prop_${container.containmentInfo.opposite.name}(null);
        container_internal._vmf_firePropertyChangeIfListenersArePresent("${container.containmentInfo.opposite.name}", oldValue, null);
      }
      // --------------------------------------------------------------------------------

      return; // unregistered -> skip other properties
#else##                                                              if   (prop is no collection type)  
      // --------------------------------------------------------------------------------
      // release 'this' from container property list '${container.typeName}.${container.containmentInfo.opposite.name}'
      // --------------------------------------------------------------------------------
      String eventInfo = container_internal.get${container.containmentInfo.opposite.nameWithUpperCase}().getEventInfo();
      container_internal.get${container.containmentInfo.opposite.nameWithUpperCase}().setEventInfo(${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
      boolean removed = container_internal.get${container.containmentInfo.opposite.nameWithUpperCase}().remove(this);
      container_internal.get${container.containmentInfo.opposite.nameWithUpperCase}().setEventInfo(eventInfo);
      if(removed) {
        return; // unregistered -> skip other properties
      }
      
      // --------------------------------------------------------------------------------
#end##                                                               if   (prop is no collection type)  
    // ----------------------------------------------------------------------------------------------------------------
    } // end if (this.__vmf_prop_${container.name} != null)
#else##  no container or no opposite

    // - > no container to unregister: ${container.name} : ${container.typeName}   
    // - > opposite: #if(!${container.containmentInfo.withoutOpposite})${container.containmentInfo.opposite.name}#else<none>#end


#end##   container 
#end## for-each container
// --------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------------------------------------------------------------------------
// UNREGISTERING from containers without opposite on our end
// --------------------------------------------------------------------------------------------------------------------
#if(${type.ContainedWithoutOpposite})
if(_vmf_getContainer()!=null) {
  ${VMFPKG_INT}.VObjectInternalModifiable container_internal = (${VMFPKG_INT}.VObjectInternalModifiable)_vmf_getContainer();

  
} // end if anonymous container present
#end##contained without opposite

// --------------------------------------------------------------------------------------------------------------------

} // end unregister from containers


#foreach( $container in ${type.implementation.properties} ) 
#if(${container.containmentInfo.containmentType}=="CONTAINER" && !${container.containmentInfo.withoutOpposite})
public void _vmf_register_WithContainer_${container.name}(${container.typeName} container) {

#foreach( $contained in ${container.type.implementation.properties} )
#if(${contained.containmentInfo.containmentType}=="CONTAINED" && !${container.containmentInfo.opposite})

#end## contained
#end## for-each contained
} // end register with container
#end## container
#end## for-each container