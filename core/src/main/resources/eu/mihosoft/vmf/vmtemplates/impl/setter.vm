#*
 * Copyright 2017-2018 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2018 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
#foreach( $prop in ${type.implementation.propertiesWithoutCollectionsBasedContainment} )
## we don't support public setters for containment opposits with collection type
## therefore we don't use override in this case, since the interface does not
## declare such a method
#set($overridePropertySetter = true)
#if(${prop.containmentProperty})
#if(${prop.containmentInfo.opposite.propType}=="COLLECTION")
#set($overridePropertySetter = false)
#end ## end if collectionType
#end ## end if containmentProperty
## for properties with collection opposites we just need to add this to the
## opposite collection which will handle the containment just fine
#if(${prop.containmentInfo.opposite.propType}=="COLLECTION")
  @Override
  public $prop.setterDeclaration {

    // opposite is a collection type. we just need to add this to the
    // opposite collection which will handle the containment just fine

    // nothing to do, values are identical
    if(this.__vmf_prop_$prop.name == $prop.name) {
      return;
    }

    // remove this from previous opposite
    if(this.__vmf_prop_$prop.name!=null) {
        this.__vmf_prop_$prop.name.${prop.containmentInfo.opposite.getterPrefix}${prop.containmentInfo.opposite.nameWithUpperCase}().remove(this);
    }

    // add this to new opposite
    if($prop.name!=null) {
        $prop.name.${prop.containmentInfo.opposite.getterPrefix}${prop.containmentInfo.opposite.nameWithUpperCase}().add(this);
    }
  }
#end## if opposite is collection type
#if(${prop.propType}!="COLLECTION" && ${prop.containmentInfo.opposite.propType}!="COLLECTION")
#if($overridePropertySetter)
  @Override
#end ## overridePropertySetter
  public $prop.setterDeclaration {

    // return early if identical value has been set
    if (this.__vmf_prop_$prop.name == $prop.name) {
      return;
    }

    // set the new value
    $prop.typeName oldValue = this.__vmf_prop_$prop.name;
    this.__vmf_prop_$prop.name = $prop.name;

    // fire property change event
    _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.__vmf_prop_$prop.name);
#if($prop.containmentProperty)
#if(${prop.containmentInfo.containmentType}=="CONTAINER")
#if(${prop.propType}=="COLLECTION")
    // no collection based containment code necessary
    // FIXME this comment should not be visible in the generated code
#else ## if collection
    // if previous container is present then release containment relation
    if(oldValue!=null) {
      // (($prop.typeName$VMF_IMPL_CLASS_EXT)oldValue)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(null);
#set($disableFireEventValue=false)
#set($propertyToModifyValue = "oldValue")
#set($oppositeValue = "null")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }

    // if new container is present then update containment relation
    if($prop.name!=null) {
      // (($prop.typeName$VMF_IMPL_CLASS_EXT)$prop.name)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(this);

#set($disableFireEventValue=false)
#set($propertyToModifyValue = "this.__vmf_prop_"+${prop.name})
#set($oppositeValue = "this")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }
#end ## if collection
#else ## if container
#if(${prop.propType}=="COLLECTION")
    // no collection based containment code necessary
    // FIXME this comment should not be visible in the generated code
#else ## if collection
    // if previous container is present then release containment relation
    if(oldValue!=null) {
      //(($prop.typeName$VMF_IMPL_CLASS_EXT)oldValue)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(null);

#set($disableFireEventValue=false)
#set($propertyToModifyValue = "oldValue")
#set($oppositeValue = "null")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")

    }

    // if new container is present then update containment relation
    if($prop.name!=null) {
      //(($prop.typeName$VMF_IMPL_CLASS_EXT)$prop.name)._vmf_set${prop.containmentInfo.opposite.nameWithUpperCase}NoContainment(this);

      // remove '${prop.name}' object that shall be set from its previous parent
      // if it has one. for collections we perform this operation in the getter
      // method which registers a change listener that does all the work.
      if(${prop.name}.get${prop.containmentInfo.opposite.nameWithUpperCase}()!=null) {
        ${prop.name}.get${prop.containmentInfo.opposite.nameWithUpperCase}().set${prop.nameWithUpperCase}(null);
      }

#set($disableFireEventValue=false)
#set($propertyToModifyValue = "this.__vmf_prop_"+${prop.name})
#set($oppositeValue = "this")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-opposite-via-reflection.vm")
    }
#end ## if collection
#end ## if container
#end ## containment property

#set($objectToAddReferenceOnValue="this")
#set($referenceToAddValue = "this.__vmf_prop_"+${prop.name})
#set($objectToRemoveReferenceOnValue = "this")
#set($referenceToRemoveValue = "oldValue")
#set($codeIndentValue = "      ")
#parse("${VMF_TEMPLATE_PATH}impl/set-references.vm")
  } // setterDeclaration (setter method)
#if($prop.containmentProperty && ${prop.propType}!="COLLECTION")
  // internal API
  void _vmf_set${prop.nameWithUpperCase}NoContainment($prop.typeName $prop.name) {
    // set the new value
    $prop.typeName oldValue = this.__vmf_prop_$prop.name;
    this.__vmf_prop_$prop.name = $prop.name;

    // fire property change event
    _vmf_firePropertyChangeIfListenersArePresent("$prop.name", oldValue, this.__vmf_prop_$prop.name);
  }
#end ## end if containment property and no collection
#end ## end if containment property
#end ## end for-each
