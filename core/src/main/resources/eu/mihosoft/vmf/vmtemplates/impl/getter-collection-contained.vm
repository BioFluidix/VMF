#if($prop.propType == "COLLECTION" && $prop.contained && !$prop.crossRefProperty)##      COLLECTION PROP
    // this property holds a collection of objects that are contained in this instance (${type.typeName})

    // perform lazy initialization
    if(this.__vmf_prop_$prop.name==null) {
        this.__vmf_prop_$prop.name = ${VCOLL_PKG}.VList.newInstance(__vmf_get_prop_${prop.name}__vmf_RawList());

        this.__vmf_prop_${prop.name}.addChangeListener( (evt) -> {
            evt.added().elements().forEach( (e) -> {

                if(e==null || ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT.equals(evt.eventInfo())) return;

                // unregister from previous container
                ${VMFPKG_INT}.VObjectInternalModifiable valueInternal = (${VMFPKG_INT}.VObjectInternalModifiable)e;
                //if(valueInternal._vmf_getContainer()!=this) {
                    valueInternal._vmf_unregisterFromContainers();
                //}

                // register with this container
                ${VMFPKG}.VObject oldContainer = valueInternal._vmf_getContainer(); 
                valueInternal._vmf_setContainer(this);
#if(${prop.containmentInfo.opposite})## opposite
                valueInternal._vmf_setContainerPropertyId(${prop.containmentInfo.opposite.propId});
                ((__VMF_TYPE_${prop.genericTypeName}Impl)valueInternal)._vmf_firePropertyChangeIfListenersArePresent("${prop.containmentInfo.opposite.name}", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#else##                                      ## opposite
                ((__VMF_TYPE_${prop.genericTypeName}Impl)valueInternal)._vmf_firePropertyChangeIfListenersArePresent("__vmf_prop_unnamed_container", oldContainer, this, ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT);
#end##                                       ## opposite                
                
            }); // end of evt.added()     

            evt.removed().elements().forEach( (e) -> {

                if(e==null || ${VMFPKG_INT}.ChangeInternal.CHANGE_TYPE_CONTAINMENT.equals(evt.eventInfo())) return;

                // unregister from previous container
                ${VMFPKG_INT}.VObjectInternalModifiable valueInternal = (${VMFPKG_INT}.VObjectInternalModifiable)e;

                // finally, set the container to 'null' and fire the corresponding event
                valueInternal._vmf_unregisterFromContainers();      
                
            }); // end of evt.added()     
        }); // end of addChangeListener
             

    } // end of "lazy init" if(this.__vmf_prop_$prop.name==null)

    // return the collection
    return this.__vmf_prop_$prop.name;
#end##                                                                                   COLLECTION PROP