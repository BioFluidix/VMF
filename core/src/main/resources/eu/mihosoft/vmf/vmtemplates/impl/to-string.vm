#*
 * Copyright 2017-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 * Copyright 2017-2019 Goethe Center for Scientific Computing, University Frankfurt. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 *#
  // --------------------------- BEGIN TO_STRING -----------------------------
#if(${type.isToStringMethodDelegated()})
  // -> toString() method is delegated
#else## #if(${type.isToStringMethodDelegated()})
  @Override
  public String toString() {

    boolean entry = _vmf_getThreadLocalToString().get().isEmpty();
    try {
        // test if "this" has been seen before
        // implementation based on http://stackoverflow.com/a/11300376/1493549
        boolean isImmutable = (this instanceof eu.mihosoft.vmf.runtime.core.Immutable);
        if (!isImmutable && _vmf_getThreadLocalToString().get().containsKey(this)) {
          return "{skipping recursion}";
        } else {
          if(!isImmutable) {
            _vmf_getThreadLocalToString().get().put(this, null);
          }
          entry = true;
        }
        return "{\"@type\":\"$type.typeName\"" +
#foreach ($prop in $type.implementation.properties)
#if (${prop.isIgnoredForToString()} == false)
#if ($prop.containmentInfo.containmentType != "CONTAINER" )
#if ($prop.containmentInfo.containmentType == "CONTAINED" && $prop.propType == "COLLECTION")
        ", " + (this.__vmf_prop_${prop.name}==null?"[]":this.__vmf_prop_${prop.name}) +
#else
        ", \"$prop.name\": \"" + this.__vmf_prop_$prop.name + "\"" +
#end ## if contained and collection
#end ## end if container type
#end ## end if not ignore for toString
#end ## for-each property
        "}";
    } finally {
        if (entry) {
            _vmf_getThreadLocalToString().get().clear();
            _vmf_fToStringChecker = null;
        }
    }
  }

  private ThreadLocal<java.util.IdentityHashMap<Object, ?>> _vmf_getThreadLocalToString() {
    if (_vmf_fToStringChecker==null) {
      _vmf_fToStringChecker = ThreadLocal.withInitial(
        () -> new java.util.IdentityHashMap<>());
    }

    return _vmf_fToStringChecker;
  }

  private static ThreadLocal<java.util.IdentityHashMap<Object, ?>> _vmf_fToStringChecker;

  // end toString()
#end## #if(${type.isToStringMethodDelegated()})
  // ---------------------------- END TO_STRING ------------------------------
